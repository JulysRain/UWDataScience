install.packages("caret")
install.packages("rpart")
install.packages("tree")
install.packages("randomForest")
install.packages("e1071")
install.packages("ggplot2")
library(randomForest)
modelForest <- randomForest(fol, data=training)
# Question 1, 2
data <- read.csv("seaflow_21min.csv")
str(data)
summary(data)
head(data,20)
summary(data$pop)
# Question 3
library(caret)
# createDataPartition, Y means the vector you want to evaluate/i.e. the outcomes.
x = createDataPartition(data$pop, p=0.5, list=FALSE)
head(x)
training <- data[x,]
testing <- data[-x,]
dim(training)
dim(testing)
# Question 4
library(ggplot2)
str(data)
ggplot(data)+geom_point(aes(x=pe, y=chl_small,colour=pop))
# Question 5,6,7
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method = "class", data=training)
print(model)
# Question 8
ptA <- as.data.frame(predict(model, testing))
x = levels(testing$pop)
ptA$max <- factor(names(ptA)[apply(ptA, 1, which.max)], levels=x)
ptA$real <- testing$pop
myfunc <- function(x){
m=0
if (x[6]==x[7]){
m = 1
}
return(m)
}
ptA$correct <- apply(ptA,1,myfunc)
accuracy <- sum(ptA$correct)/nrow(na.omit(ptA))
# 0.8543861
accuracy
modelForest <- randomForest(fol, data=training)
ptB <- as.data.frame(predict(modelForest, testing))
ptB$max <- factor(names(ptB)[apply(ptB, 1, which.max)], levels=x)
ptB$real <- testing$pop
head(ptB)
head(ptB$max)
ptB <- as.data.frame(predict(modelForest, testing))
head(ptB$max)
head(ptB)
ptB$max <- factor(ptB$max, levels=x)
ptB$max <- as.data.frame(predict(modelForest, testing))
ptB$max <- factor(ptB$max, levels=x)
ptB$max
head(ptB$max)
ptB$max <- as.data.frame(predict(modelForest, testing))
str(ptB)
str(ptB$max)
head(ptB)
head(ptB$max)
ptB$real <- testing$pop
ptB$correct <- apply(ptB,1,myfunc)
ptB[1]
ptB[2]
ptB[3]
head(ptB[3])
head(ptB[2])
head(ptB[1])
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptB$correct <- apply(ptB,1,myfunc)
ptB[1]==ptB[2]
ptB[1]>ptB[2]
str(predict(modelForest, testing))
list(str(predict(modelForest, testing)))
str(ptB$max)
str(ptB$real)
ptB$max <- predict(modelForest, testing)
str(ptB$max)
str(ptB$real)
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptB$correct <- apply(ptB,1,myfunc)
accuracy <- sum(ptB$correct)/nrow(na.omit(ptB))
accuracy
importance(modelForest)
modelSVM <- svm(fol, data=training)
library(e1071)
modelSVM <- svm(fol, data=training)
ptC$max <- predict(modelSVM, testing)
ptC <- predict(modelSVM, testing)
ptC$real <- testing$pop
ptC$max <- predict(modelSVM, testing)
ptC$real <- testing$pop
table(pred = ptC$max, true = ptC$real)
table(pred = ptA$max, true = ptA$real)
table(pred = ptB$max, true = ptB$real)
table(pred = ptC$max, true = ptC$real)
str(data)
plot(data$fsc_small)
plot(data$fsc_big)
plot(data$pe)
plot(data$fsc_perp)
plot(data$chl_small)
plot(data$chl_big)
plot(time,chl_big)
with(data,plot(time,chl_big))
data$file_id == 108
row_to_delete = (data$file_id == 108)
str(row_to_delete)
summary(row_to_delete)
row_to_delete = (data$file_id == '108')
summary(row_to_delete)
str(data)
row_to_delete = (data$file_id == 202)
summary(row_to_delete)
data$file_id == 202
data$file_id == 203
row_to_delete = (data$file_id == 203)
summary(row_to_delete)
row_to_delete = (data$file_id == 208)
summary(row_to_delete)
newData = data[-row_to_delete]
nrow(newData)
newData = data[!row_to_delete]
row_to_delete = (data$file_id != 208)
newData = data[row_to_delete]
row_to_delete
summary(row_to_delete)
data[,1]
data[1,]
newData = data[row_to_keep,]
row_to_keep = (data$file_id != 208)
newData = data[row_to_keep,]
nrow(newData)
row_to_keep = (data$file_id != 208)
data = data[row_to_keep,]
training <- data[x,]
testing <- data[-x,]
x = createDataPartition(data$pop, p=0.5, list=FALSE)
training <- data[x,]
testing <- data[-x,]
ptA <- as.data.frame(predict(model, testing))
x = levels(testing$pop)
ptA$max <- factor(names(ptA)[apply(ptA, 1, which.max)], levels=x)
ptA$real <- testing$pop
myfunc <- function(x){
m=0
if (x[6]==x[7]){
m = 1
}
return(m)
}
ptA$correct <- apply(ptA,1,myfunc)
accuracy <- sum(ptA$correct)/nrow(na.omit(ptA))
# 0.8543861
accuracy
modelForest <- randomForest(fol, data=training)
ptB$max <- predict(modelForest, testing)
ptB$real <- testing$pop
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptB$correct <- apply(ptB,1,myfunc)
accuracy <- sum(ptB$correct)/nrow(na.omit(ptB))
# 0.9201017
accuracy
ptB <- predict(modelForest, testing)
ptB$max <- predict(modelForest, testing)
ptB$real <- testing$pop
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptB$correct <- apply(ptB,1,myfunc)
accuracy <- sum(ptB$correct)/nrow(na.omit(ptB))
# 0.9201017
accuracy
head(ptB)
ptB <- predict(modelForest, testing)
head(ptB)
head(training)
ptB
ptB <- as.data.frame(predict(modelForest, testing))
ptB$max <- predict(modelForest, testing)
ptB$real <- testing$pop
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptB$correct <- apply(ptB,1,myfunc)
accuracy <- sum(ptB$correct)/nrow(na.omit(ptB))
# 0.9201017
accuracy
ptA <- as.data.frame(predict(model, testing))
x = levels(testing$pop)
ptA$max <- factor(names(ptA)[apply(ptA, 1, which.max)], levels=x)
ptA$real <- testing$pop
myfunc <- function(x){
m=0
if (x[6]==x[7]){
m = 1
}
return(m)
}
ptA$correct <- apply(ptA,1,myfunc)
accuracy <- sum(ptA$correct)/nrow(na.omit(ptA))
# 0.8543861
accuracy
modelSVM <- svm(fol, data=training)
ptC <- predict(modelSVM, testing)
ptC$max <- predict(modelSVM, testing)
ptC <- as.data.frame(predict(modelSVM, testing))
ptC$max <- predict(modelSVM, testing)
ptC$real <- testing$pop
ptC
head(ptC)
ptC$correct <- apply(ptC,1,myfunc)
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptC$correct <- apply(ptC,1,myfunc)
accuracy <- sum(ptC$correct)/nrow(na.omit(ptC))
# 0.9703046
accuracy
nrow(data)
with(data,plot(time,chl_big))
# Question 1, 2
data <- read.csv("seaflow_21min.csv")
str(data)
summary(data)
x = createDataPartition(data$pop, p=0.5, list=FALSE)
head(x)
training <- data[x,]
testing <- data[-x,]
dim(training)
dim(testing)
mean(training$time)
ggplot(data)+geom_point(aes(x=pe, y=chl_small,colour=pop))
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method = "class", data=training)
print(model)
importance(model)
importance(modelForest)
# Question 1, 2
data <- read.csv("seaflow_21min.csv")
str(data)
summary(data)
head(data,20)
summary(data$pop)
# Question 3
library(caret)
# createDataPartition, Y means the vector you want to evaluate/i.e. the outcomes.
x = createDataPartition(data$pop, p=0.5, list=FALSE)
head(x)
training <- data[x,]
testing <- data[-x,]
dim(training)
dim(testing)
mean(training$time)
# Question 4
library(ggplot2)
str(data)
ggplot(data)+geom_point(aes(x=pe, y=chl_small,colour=pop))
# Question 5,6,7
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method = "class", data=training)
print(model)
# Question 8
ptA <- as.data.frame(predict(model, testing))
x = levels(testing$pop)
ptA$max <- factor(names(ptA)[apply(ptA, 1, which.max)], levels=x)
ptA$real <- testing$pop
myfunc <- function(x){
m=0
if (x[6]==x[7]){
m = 1
}
return(m)
}
ptA$correct <- apply(ptA,1,myfunc)
accuracy <- sum(ptA$correct)/nrow(na.omit(ptA))
# 0.8543861
accuracy
# Question 9
library(randomForest)
modelForest <- randomForest(fol, data=training)
ptB <- as.data.frame(predict(modelForest, testing))
ptB$max <- predict(modelForest, testing)
ptB$real <- testing$pop
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptB$correct <- apply(ptB,1,myfunc)
accuracy <- sum(ptB$correct)/nrow(na.omit(ptB))
# 0.9201017
accuracy
# Question 10
importance(modelForest)
library(e1071)
modelSVM <- svm(fol, data=training)
ptC <- as.data.frame(predict(modelSVM, testing))
ptC$max <- predict(modelSVM, testing)
ptC$real <- testing$pop
myfunc <- function(x){
m=0
if (x[2]==x[3]){
m = 1
}
return(m)
}
ptC$correct <- apply(ptC,1,myfunc)
accuracy <- sum(ptC$correct)/nrow(na.omit(ptC))
# 0.9723594
accuracy
table(pred = ptA$max, true = ptA$real)
table(pred = ptB$max, true = ptB$real)
table(pred = ptC$max, true = ptC$real)
0.9723594-0.92071
ggplot(data,aes(x=pe, y=chl_small))+
geom_point(colour=pop)
ggplot(data,aes(x=pe, y=chl_small))+
geom_point(colour=data$pop)
ggplot(data,aes(x=pe, y=chl_small))+
geom_point(colour='red')
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_point()
ggplot(data,aes(x=pe, y=chl_small, colour=pop))
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_line()
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_pointrange()
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_point()
?ggplot
?geom_box
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_boxplot()
ggplot(data,aes(x=pe, colour=pop))+
geom_boxplot()
ggplot(data,aes(y=chl_small, colour=pop))+
geom_boxplot()
ggplot(data,aes(x=pop, y=chl_small))+
geom_boxplot()
ggplot(data,aes(x=pop, y=chl_small, colour=pop))+
geom_boxplot()
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_point()+
theme_nothing()
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_point()+
theme_minimal()
ggplot(data,aes(x=pe, y=chl_small, colour=pop))+
geom_point()+
theme_void()
